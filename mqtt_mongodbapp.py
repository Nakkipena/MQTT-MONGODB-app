# -*- coding: utf-8 -*-
"""MQTT_MONGODBapp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m-4ytwZv0CKY_Bkq0wVdbFp2ogWUJIqO
"""

!pip install paho-mqtt
!pip install pymongo

#!/usr/bin/env python3
# mqtt_mongo.py - MQTT to MongoDB bridge in Python
# Translated from mqtt_mongo.js

#!pip install paho-mqtt
#!pip install pymongo

import os
import json
import logging
import urllib.parse

import paho.mqtt.client as mqtt
from pymongo import MongoClient

# === Configuration ===
# MQTT settings (can be set via environment variables)
MQTT_BROKER_URL = os.getenv('MQTT_BROKER_URL', 'mqtt://automaatio:Z0od2PZF65jbtcXu@automaatio.cloud.shiftr.io')
MQTT_USER       = os.getenv('MQTT_USER', '')
MQTT_PASS       = os.getenv('MQTT_PASS', '')
MQTT_TOPIC      = os.getenv('MQTT_TOPIC', 'automaatio2/#')

# MongoDB Atlas settings
MONGO_URI           = os.getenv('MONGO_URI', 'mongodb+srv://vietd:vietd@cluster0.pyelucx.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0')
MONGO_DB_NAME       = os.getenv('MONGO_DB', 'test')
MONGO_COLLECTION    = os.getenv('MONGO_COLLECTION', 'Sensordata')

# Setup logging
def setup_logging():
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s [%(levelname)s] %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    return logging.getLogger(__name__)

logger = setup_logging()

# === MongoDB Client ===
mongo_client = MongoClient(MONGO_URI)
db = mongo_client[MONGO_DB_NAME]
collection = db[MONGO_COLLECTION]

# === MQTT Callbacks ===
def on_connect(client, userdata, flags, rc):
    if rc == 0:
        logger.info(f"Connected to MQTT broker at {MQTT_BROKER_URL}")
        client.subscribe(MQTT_TOPIC)
        logger.info(f"Subscribed to topic: {MQTT_TOPIC}")
    else:
        logger.error(f"Failed to connect to MQTT broker (rc={rc})")


def on_message(client, userdata, msg):
    payload = msg.payload.decode('utf-8')
    logger.info(f"Received message on topic '{msg.topic}': {payload}")

    # Parse JSON
    try:
        obj = json.loads(payload)
    except json.JSONDecodeError:
        logger.error("Payload is not valid JSON, storing as raw string")
        obj = {"raw": payload}

    # Log specific sensor fields if present
    for field in ('Time', 'T', 'H', 'DP', 'pCount'):
        if field in obj:
            logger.info(f"{field}: {obj[field]}")

    # Insert into MongoDB
    result = collection.insert_one(obj)
    logger.info(f"Document inserted with _id={result.inserted_id}")


def parse_broker_url(url):
    parsed = urllib.parse.urlparse(url)
    host = parsed.hostname or ''
    port = parsed.port or 1883
    return host, port


def main():
    # Parse broker URL
    host, port = parse_broker_url(MQTT_BROKER_URL)

    # Initialize MQTT client
    client = mqtt.Client()
    if MQTT_USER and MQTT_PASS:
        client.username_pw_set(MQTT_USER, MQTT_PASS)

    client.on_connect = on_connect
    client.on_message = on_message

    # Connect and start loop
    client.connect(host, port)
    client.loop_forever()


if __name__ == '__main__':
    main()